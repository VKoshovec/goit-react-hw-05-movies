{"version":3,"file":"static/js/547.943e4094.chunk.js","mappings":"+VAEMA,EAAS,mCAER,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,8FACSC,EAAAA,EAAAA,IAAA,kEAAqEF,IAAUG,MAAK,SAAAC,GAAM,OAAIA,EAAOC,KAAKC,OAAhB,IADnG,0GAIA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,iFACSN,EAAAA,EAAAA,IAAA,4DAA+DF,EAA/D,iCAA8FQ,EAA9F,gCAAqIL,MAAK,SAAAC,GAAM,OAAIA,EAAOC,KAAKC,OAAhB,IADzJ,0GAIA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA6BC,GAA7B,iFACSR,EAAAA,EAAAA,IAAA,6CAAgDQ,EAAhD,oBAAkEV,EAAlE,oBAA2FG,MAAK,SAAAC,GAAM,OAAIA,EAAOC,IAAX,IAD/G,0GAIA,SAASM,EAAYC,EAASC,GAClC,MAAM,+BAAN,OAAsCA,EAAtC,YAAiDD,EACnD,CAEM,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA6BC,GAA7B,uFAEkBb,EAAAA,EAAAA,IAAA,gEAAmEF,EAAnE,oBACrBG,MAAK,SAAAa,GAAG,OAAGA,EAAIX,KAAKY,MAAZ,IAHL,cAEEC,EAFF,yBAKGA,EAAQC,QAAQ,SAACC,EAAKC,GAE1B,OADIN,EAAUO,SAASD,EAAQE,KAAMH,EAAII,KAAKH,EAAQI,MAC/CL,CACT,GAAE,KARC,kEAWA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA6BhB,GAA7B,iFACSR,EAAAA,EAAAA,IAAA,6CAAgDQ,EAAhD,4BAA0EV,EAA1E,oBAAmGG,MAAK,SAAAC,GAAM,OAAIA,EAAOC,IAAX,IADvH,0GAIA,SAAesB,EAAtB,+CAAO,OAAP,oBAAO,WAAgCjB,GAAhC,iFACSR,EAAAA,EAAAA,IAAA,6CAAgDQ,EAAhD,4BAA0EV,EAA1E,2BAA0GG,MAAK,SAAAC,GAAM,OAAIA,EAAOC,IAAX,IAD9H,0G,0GClCP,EAAuB,yB,kBCKjBuB,GAAeC,EAAAA,EAAAA,OAAK,kBAAM,4BAAN,IAgC1B,EA9BmB,WAEf,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAYF,EAAaG,IAAI,SAYnC,OAJAC,EAAAA,EAAAA,YAAW,YACPF,IAAa7B,EAAAA,EAAAA,IAAgB6B,GAAWjC,MAAK,SAAAa,GAAG,OAAIgB,EAAUhB,EAAd,IAAoBuB,OAAM,kBAAMC,MAAM,yBAAZ,GAC7E,GAAC,CAACJ,KAGC,iCACA,kBAAMK,UAAYC,EAAYC,SAZb,SAACC,GACnBA,EAAEC,iBACF,IAAMC,EAAQF,EAAEG,OAAOC,SAASC,WAAWC,MAC3Cf,EAAgB,CAAC,MAASW,GAC5B,EAQG,WACI,kBAAOK,KAAK,OAAO1B,KAAK,aAAa2B,aAAehB,KACpD,mBAAQe,KAAK,SAAb,wBAEH,SAAC,EAAAE,SAAD,CAAUC,UAAW,SAACC,EAAA,EAAD,IAArB,UACI,SAAC3B,EAAD,CAAc4B,MAAQzB,QAIlC,C","sources":["components/moviesApi.js","webpack://goit-react-hw-05-movies/./src/pages/MoviesPage/moviesPage.module.scss?5505","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst apiKey = '0bf9a11da9d083f4751315d07dcbd89b';\n\nexport async function trendingMovies () {\n   return await axios.get(`https://api.themoviedb.org/3/trending/movie/day?api_key=${apiKey}`).then(result => result.data.results);\n};\n\nexport async function getMoviesByName (filmName) {\n   return await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=en-US&query=${filmName}&page=1&include_adult=false`).then(result => result.data.results);\n};\n\nexport async function getMovieInfo (filmid) {\n   return await axios.get(`https://api.themoviedb.org/3/movie/${filmid}?api_key=${apiKey}&language=en-US`).then(result => result.data);\n};\n\nexport function getImageUrl(imgName, imgSize) {\n   return `https://image.tmdb.org/t/p/w${imgSize}/${imgName}`;\n};\n\nexport async function getGenresList(genresIds) {\n   \n   const request = await axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${apiKey}&language=en-US`)\n   .then(res=> res.data.genres);\n\n   return request.reduce ((acc, element) => {\n      if (genresIds.includes(element.id)){ acc.push(element.name) }     \n      return acc;\n   }, []); \n};\n\nexport async function getMovieCast (filmid) {\n   return await axios.get(`https://api.themoviedb.org/3/movie/${filmid}/credits?api_key=${apiKey}&language=en-US`).then(result => result.data);\n};\n\nexport async function getMovieReviews (filmid) {\n   return await axios.get(`https://api.themoviedb.org/3/movie/${filmid}/reviews?api_key=${apiKey}&language=en-US&page=1`).then(result => result.data);\n};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"moviesPage_form__3m6r-\"};","import { useState, useEffect, lazy, Suspense } from 'react';\nimport { getMoviesByName } from 'components/moviesApi';\nimport { useSearchParams } from \"react-router-dom\";\nimport scss from './moviesPage.module.scss';\nimport Loader from \"components/Loader/Loader\";\n\nconst LazyFilmList = lazy(() => import(\"components/FilmList/FilmList\"));\n\nconst MoviesPage = () => {\n\n    const [fdFilms, setFdFilm ] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n   \n    const queryFilm = searchParams.get('query');\n\n    const hendleSubmit = (e) => {\n       e.preventDefault();\n       const query = e.target.elements.searchWord.value;\n       setSearchParams({'query': query});\n    }\n\n    useEffect (()=>{\n       !queryFilm || getMoviesByName(queryFilm).then(res => setFdFilm(res)).catch(() => alert('Some problems with API'));\n    },[queryFilm]);\n\n    return(\n        <>\n        <form className={ scss.form } onSubmit={ hendleSubmit }>\n            <input type=\"text\" name=\"searchWord\" defaultValue={ queryFilm }/>\n            <button type=\"submit\">Search</button>\n        </form>\n         <Suspense fallback={ <Loader/> }>\n             <LazyFilmList films={ fdFilms }/>\n         </Suspense>\n        </>\n    );\n}\n\nexport default MoviesPage;"],"names":["apiKey","trendingMovies","axios","then","result","data","results","getMoviesByName","filmName","getMovieInfo","filmid","getImageUrl","imgName","imgSize","getGenresList","genresIds","res","genres","request","reduce","acc","element","includes","id","push","name","getMovieCast","getMovieReviews","LazyFilmList","lazy","useState","fdFilms","setFdFilm","useSearchParams","searchParams","setSearchParams","queryFilm","get","useEffect","catch","alert","className","scss","onSubmit","e","preventDefault","query","target","elements","searchWord","value","type","defaultValue","Suspense","fallback","Loader","films"],"sourceRoot":""}