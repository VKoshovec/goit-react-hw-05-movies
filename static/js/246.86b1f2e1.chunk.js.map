{"version":3,"file":"static/js/246.86b1f2e1.chunk.js","mappings":"2NACA,EAA0B,yBAA1B,EAA6D,yB,SC2B7D,EAtBgB,WAEZ,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACMC,GAAUC,EAAAA,EAAAA,MAAYC,GAM5B,OAJAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAgBJ,GAASK,MAAK,SAAAC,GAAG,OAAIP,EAAWO,EAAIC,QAAnB,IAA6BC,OAAM,kBAAMC,MAAM,yBAAZ,GACvE,GAAC,CAACT,KAGC,eAAIU,UAAYC,EAAhB,SACMb,EAAQc,OAAS,EACjBd,EAAQe,KAAI,SAACC,GAAY,OAAO,2BAChC,cAAGJ,UAAYC,EAAf,0BAA0CG,EAAQC,WAClD,uBAAKD,EAAQE,YCDP,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACnB,EAAIoB,GAWvD,OAREpB,IAFFoB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CDDoCG,GAGpC,KACN,mDAIb,C,+OExBKC,EAAS,mCAER,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,8FACSC,EAAAA,EAAAA,IAAA,kEAAqEF,IAAUrB,MAAK,SAAAwB,GAAM,OAAIA,EAAOC,KAAKvB,OAAhB,IADnG,0GAIA,SAAewB,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,iFACSJ,EAAAA,EAAAA,IAAA,4DAA+DF,EAA/D,iCAA8FM,EAA9F,gCAAqI3B,MAAK,SAAAwB,GAAM,OAAIA,EAAOC,KAAKvB,OAAhB,IADzJ,0GAIA,SAAe0B,EAAtB,+CAAO,OAAP,oBAAO,WAA6BC,GAA7B,iFACSN,EAAAA,EAAAA,IAAA,6CAAgDM,EAAhD,oBAAkER,EAAlE,oBAA2FrB,MAAK,SAAAwB,GAAM,OAAIA,EAAOC,IAAX,IAD/G,0GAIA,SAASK,EAAYC,EAASC,GAClC,MAAM,+BAAN,OAAsCA,EAAtC,YAAiDD,EACnD,CAEM,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA6BC,GAA7B,uFAEkBX,EAAAA,EAAAA,IAAA,gEAAmEF,EAAnE,oBACrBrB,MAAK,SAAAC,GAAG,OAAGA,EAAIwB,KAAKU,MAAZ,IAHL,cAEEC,EAFF,yBAKGA,EAAQpB,QAAQ,SAACqB,EAAK5B,GAE1B,OADIyB,EAAUI,SAAS7B,EAAQZ,KAAMwC,EAAIE,KAAK9B,EAAQ+B,MAC/CH,CACT,GAAE,KARC,kEAWA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA6BZ,GAA7B,iFACSN,EAAAA,EAAAA,IAAA,6CAAgDM,EAAhD,4BAA0ER,EAA1E,oBAAmGrB,MAAK,SAAAwB,GAAM,OAAIA,EAAOC,IAAX,IADvH,0GAIA,SAAe1B,EAAtB,+CAAO,OAAP,oBAAO,WAAgC8B,GAAhC,iFACSN,EAAAA,EAAAA,IAAA,6CAAgDM,EAAhD,4BAA0ER,EAA1E,2BAA0GrB,MAAK,SAAAwB,GAAM,OAAIA,EAAOC,IAAX,IAD9H,0G","sources":["webpack://goit-react-hw-05-movies/./src/components/Reviews/reviews.module.scss?1d70","components/Reviews/Reviews.jsx","../node_modules/nanoid/index.browser.js","components/moviesApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"revList\":\"reviews_revList__6mpol\",\"revAuth\":\"reviews_revAuth__ZoNBF\"};","import { getMovieReviews } from \"components/moviesApi\";\nimport { useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport scss from './reviews.module.scss'\n\nconst Reviews = () => {\n\n    const [reviews, setReviews] = useState([]);\n    const movieId = useParams().id;\n\n    useEffect(()=>{\n        getMovieReviews(movieId).then(res => setReviews(res.results)).catch(() => alert('Some problems with API'));\n    },[movieId]);\n\n    return (\n        <ul className={ scss.revList }>\n            { reviews.length > 0 ? \n              reviews.map((element)=>{ return <li key={ nanoid() }>\n              <p className={ scss.revAuth }>{`Autor: ${ element.author }`}</p>\n              <p>{ element.content }</p>\n              </li>}) :\n              <li>There are no reviews.</li>\n            } \n        </ul>\n    )\n};\n\nexport default Reviews;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import axios from \"axios\";\n\nconst apiKey = '0bf9a11da9d083f4751315d07dcbd89b';\n\nexport async function trendingMovies () {\n   return await axios.get(`https://api.themoviedb.org/3/trending/movie/day?api_key=${apiKey}`).then(result => result.data.results);\n};\n\nexport async function getMoviesByName (filmName) {\n   return await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=en-US&query=${filmName}&page=1&include_adult=false`).then(result => result.data.results);\n};\n\nexport async function getMovieInfo (filmid) {\n   return await axios.get(`https://api.themoviedb.org/3/movie/${filmid}?api_key=${apiKey}&language=en-US`).then(result => result.data);\n};\n\nexport function getImageUrl(imgName, imgSize) {\n   return `https://image.tmdb.org/t/p/w${imgSize}/${imgName}`;\n};\n\nexport async function getGenresList(genresIds) {\n   \n   const request = await axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${apiKey}&language=en-US`)\n   .then(res=> res.data.genres);\n\n   return request.reduce ((acc, element) => {\n      if (genresIds.includes(element.id)){ acc.push(element.name) }     \n      return acc;\n   }, []); \n};\n\nexport async function getMovieCast (filmid) {\n   return await axios.get(`https://api.themoviedb.org/3/movie/${filmid}/credits?api_key=${apiKey}&language=en-US`).then(result => result.data);\n};\n\nexport async function getMovieReviews (filmid) {\n   return await axios.get(`https://api.themoviedb.org/3/movie/${filmid}/reviews?api_key=${apiKey}&language=en-US&page=1`).then(result => result.data);\n};"],"names":["useState","reviews","setReviews","movieId","useParams","id","useEffect","getMovieReviews","then","res","results","catch","alert","className","scss","length","map","element","author","content","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","apiKey","trendingMovies","axios","result","data","getMoviesByName","filmName","getMovieInfo","filmid","getImageUrl","imgName","imgSize","getGenresList","genresIds","genres","request","acc","includes","push","name","getMovieCast"],"sourceRoot":""}